<?php

/**
 * @file
 * GovCMS Account Security.
 */

/**
 * Implements hook_menu().
 */
function govcms_account_security_menu() {
  // Provide a page to review account security related settings.
  $items['admin/config/people/account_security'] = [
    'title' => 'Review account security settings',
    'page arguments' => ['govcms_account_security_admin_settings'],
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_access',
    'access arguments' => ['administer users'],
    'file' => 'govcms_account_security.admin.inc',
    'description' => 'Review govCMS account security settings.',
  ];
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function govcms_account_security_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'views_form_admin_views_user_system_1':
      // VBO allows those who have "administor users" permission to assign
      // administrator role to any user and we don't want this to happen.
      $admin_rid = variable_get('user_admin_role');
      $admin_role = user_role_load($admin_rid);
      $admin_role = $admin_role->name;
      if (isset($form['add_roles'])) {
        if (($key = array_search($admin_role, $form['add_roles']['#options'])) !== FALSE) {
          unset($form['add_roles']['#options'][$key]);
          $form['add_roles']['#size']--;
        }
      }
      if (isset($form['remove_roles'])) {
        if (($key = array_search($admin_role, $form['remove_roles']['#options'])) !== FALSE) {
          unset($form['remove_roles']['#options'][$key]);
          $form['remove_roles']['#size']--;
        }
      }
      break;

    case 'user_admin_permissions':

      // Disable the ability to change any configured permissions.
      global $user;
      $banned_permissions = variable_get('govcms_account_security_policy_report_banned_permissions', array());
      // The following permissions cannot be absent from this flow control.
      $permissions = array(
        'administer module permissions',
        'administer managed modules',
        'administer managed modules permissions',
      );
      array_merge($permissions, $banned_permissions);

      foreach (element_children($form['checkboxes']) as $key) {
        // Loop through each permission and disable
        foreach ($banned_permissions as $perm) {
          if (isset($form['checkboxes'][$key])) {
            if ((int) $user->uid !== 1) {
              $form['checkboxes'][$key][$perm]['#disabled'] = TRUE;
            }
            $form['permission'][$perm]['#description'] = '<strong>Disabled via govCMS</strong>';
          }
        }
      }

      break;

    case 'system_modules':
      if (empty($form['modules'])) {
        break;
      }

      // Disable the ability to change any configured modules.
      global $user;
      $modules = variable_get('govcms_account_security_policy_report_banned_modules', array());
      foreach ($form['modules'] as $group => $value) {
        foreach ($modules as $module) {
          if (isset($form['modules'][$group][$module]) && is_array($form['modules'][$group][$module])) {
            if ((int) $user->uid !== 1) {
              $form['modules'][$group][$module]['enable']['#disabled'] = TRUE;
            }
            $form['modules'][$group][$module]['description']['#markup'] .= '<br /><strong>Disabled via govCMS</strong>';
          }
        }
      }
      break;

  }
}

/**
 * Implements hook_user_cancel_methods_alter().
 *
 * Remove the VBO options to cancel (delete) an account.
 * Related discussion: https://www.drupal.org/node/2505457
 */
function govcms_account_security_user_cancel_methods_alter(&$methods) {
  unset($methods['user_cancel_reassign']);
  unset($methods['user_cancel_delete']);
}

/**
 * Implements hook_action_info_alter().
 */
function govcms_account_security_action_info_alter(&$actions) {
  if (module_exists('views_bulk_operations')) {
    $actions['views_bulk_operations_user_roles_action']['permissions'] = ['administer users'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function govcms_account_security_form_system_actions_configure_alter(&$form, &$form_state, $form_id) {
  $action = actions_function_lookup($form['actions_action']['#value']);

  switch ($action) {
    case 'views_bulk_operations_user_roles_action':
      $roles = user_roles(TRUE);
      // Can't edit authenticated role.
      unset($roles[DRUPAL_AUTHENTICATED_RID]);
      // Remove admin role.
      $admin_rid = variable_get('user_admin_role');
      if ($admin_rid) {
        unset($roles[$admin_rid]);
      }
      // Rebuild the roles list.
      $form['add_roles'] = [
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Add roles'),
        '#description' => t('Choose one or more roles you would like to assign to the selected users.'),
        '#options' => $roles,
        '#size' => 5,
      ];
      $form['remove_roles'] = [
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Remove roles'),
        '#description' => t('Choose one or more roles you would like to remove from the selected users.'),
        '#options' => $roles,
        '#size' => 5,
      ];
      break;
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function govcms_account_security_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($vbo->table != 'users') {
    return;
  }

  // Alter the configuration step of the VBO form.
  if ($form_state['step'] == 'views_bulk_operations_config_form') {
    $admin_rid = variable_get('user_admin_role');
    if ($admin_rid && !empty($form['properties']['roles'])) {
      // Hide admin role from the list.
      unset($form['properties']['roles']['#options'][$admin_rid]);
    }
  }

  // Alter the appropriate form submitter.
  $form_element = NULL;
  if (isset($form['select']['submit']['#submit'])) {
    $form_element = &$form['select']['submit'];
  }
  elseif (isset($form['actions']['submit']['#submit'])) {
    $form_element = &$form['actions']['submit'];
  }
  else {
    $form_element = &$form;
  }

  $form_element['#validate'] = isset($form_element['#validate']) ? $form_element['#validate'] : [];
  array_unshift($form_element['#validate'], 'govcms_account_security_vbo_user_validate');
}

/**
 * Validate user and group in VBO.
 *
 * @param array $form
 *   A step of the VBO form to be altered.
 * @param array $form_state
 *   Form state. Contains the name of the current step in $form_state['step'].
 */
function govcms_account_security_vbo_user_validate(array $form, array &$form_state) {
  // Get the checked users, and the operation name.
  if (isset($form_state['operation']) && $form_state['operation'] instanceof ViewsBulkOperationsAction) {
    $uids = $form_state['selection'];
    $operation = $form_state['operation']->operationId;
  }
  elseif (!empty($form_state['values']['views_bulk_operations'])) {
    $uids = array_filter($form_state['values']['views_bulk_operations']);
    $operation = $form_state['values']['operation'];
  }
  elseif (!empty($form_state['values']['accounts'])) {
    $uids = array_filter($form_state['values']['accounts']);
    $operation_rid = explode('-', $form_state['values']['operation']);
    $operation = $operation_rid[0];
  }
  else {
    // Uids or operation could not be found. Abort.
    return;
  }

  // Perform the check for each submitted user.
  foreach ($uids as $key => $uid) {
    $account = user_load($uid);
    switch ($operation) {
      // VBO module compatibility.
      case 'action::views_bulk_operations_modify_action':
        if (empty($form_state['values']['properties']['show_value'])) {
          // No properties were selected to be changed. Abort.
          return;
        }

        // Check which properties are changed.
        $properties = array_keys(array_filter($form_state['values']['properties']['show_value']));
        foreach ($properties as $property) {
          if (in_array($property, ['roles'])) {
            // Change roles.
            $roles = array_keys(array_filter($form_state['values']['properties']['roles']));
            $admin_rid = variable_get('user_admin_role');
            if ($admin_rid && in_array($admin_rid, $roles)) {
              unset($uids[$key]);
              unset($form_state['selection'][$key]);
              unset($form_state['values']['views_bulk_operations'][$key]);
              drupal_set_message(t('Admin role is protected from any changes, and %user was not updated.', ['%user' => $account->name]), 'error');
              continue;
            }
          }
        }
        break;
    }
  }
}
