<?php

/**
 * @file
 * govCMS Password Policy
 *
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 *
 * aGov
 * @copyright Copyright(c) 2014 PreviousNext
 * @author Chris Skene chris at previousnext dot com dot au
 *
 * govCMS (Forked on 1 April 2015 - http://cgit.drupalcode.org/govcms/commit/?id=64b602dcc7ddde0992c5c7cf5f3c4a795e5be08a)
 * The original foundation for the govCMS distribution is aGov; the Drupal distribution created by PreviousNext to provide a core set of elements, functionality and features that can be used to develop government websites
 * @copyright Copyright(c) 2015 Commonwealth of Australia as represented by Department of Finance
 * @author Department of Finance
 */

/**
 * Define a constant for marking a policy to apply to all roles.
 */
const GOVCMS_PASSWORD_POLICY_ALL_ROLES = '_govcms_password_policy all';

/**
 * Implements hook_init().
 */
function govcms_password_policy_init() {

  global $user;

  if (path_is_admin(current_path()) && user_access('administer password policies', $user) && variable_get('govcms_password_policy_ready', 0) == 0) {
    drupal_set_message(t('Current Password Policies may not conform to current
      ASD standards. <a href="/admin/config/people/password_policy">Please check your settings...</a>'), 'warning', FALSE);
  }
}

/**
 * Implements hook_menu_alter().
 */
function govcms_password_policy_menu_alter(&$items) {

  $items['admin/config/people/password_policy/govcms'] = array(
    'title' => 'govCMS',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govcms_password_policy_admin_settings'),
    'access arguments' => array('administer password policies'),
    'weight' => 10,
    'file' => drupal_get_path('module', 'govcms_password_policy') . '/govcms_password_policy.admin.inc',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function govcms_password_policy_form_password_policy_admin_list_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'govcms_password_policy_form_password_policy_admin_list_submit';
}

/**
 * Additional submit callback for 'password_policy_admin_list'.
 */
function govcms_password_policy_form_password_policy_admin_list_submit($form, &$form_state) {

  $policy_index = array();

  foreach ($form_state['complete form']['policies'] as $pid => $policy) {
    if (is_numeric($pid)) {
      $policy_index[$pid] = $policy['name']['#markup'];
    }
  }

  $valid_policies = array(
    'Australian Government ISM Policy (Strong)',
    'Australian Government ISM Policy (Weak)',
  );

  govcms_password_policy_warning_enable();
  foreach ($form_state['values']['policies'] as $values_pid => $settings) {
    if (in_array($policy_index[$values_pid], $valid_policies)) {
      if ($settings['enabled'] == 1) {
        govcms_password_policy_warning_disable();
      }
    }
  }
}

/**
 * Get policies.
 *
 * @return array
 *   An array of policies.
 */
function govcms_password_policy_get_policies() {

  // Define the password policy.
  $policies['ism_2013_strong'] = array(
    'name' => 'Australian Government ISM Policy (Strong)',
    'description' => 'Strong password policy that conforms to Australian Government ISM Control: 0421; Revision: 2; Updated: Sep-12;.',
    'enabled' => 1,
    'expiration' => 90,
    'warning' => 7,
    'policy' => array(
      "alphanumeric" => "1",
      "complexity" => "3",
      "delay" => "24",
      "history" => "8",
      "length" => "11",
      "letter" => "1",
      "username" => "1",
    ),
    'roles' => GOVCMS_PASSWORD_POLICY_ALL_ROLES,
  );

  // Define the password policy for ISM 2013
  $policies['ism_2013_weak'] = array(
    'name' => 'Australian Government ISM Policy (Weak)',
    'description' => 'Weak password policy that conforms to Australian Government ISM Control: 0421; Revision: 2; Updated: Sep-12;.',
    'enabled' => 1,
    'expiration' => 90,
    'warning' => 7,
    'policy' => array(
      "alphanumeric" => "1",
      "delay" => "24",
      "history" => "8",
      "length" => "15",
      "letter" => "1",
      "username" => "1",
    ),
    'roles' => array(),
  );

  return $policies;
}

/**
 * Write a policy to the database.
 *
 * @param array $settings
 *   An array of policy settings, matching that returned by
 *   govcms_password_policy_get_policies().
 *
 * @throws Exception
 */
function govcms_password_policy_create_policy($settings) {

  // Policy settings should be serialised.
  $settings['policy'] = serialize($settings['policy']);

  // Remove the roles key to process separately.
  $roles = $settings['roles'];
  unset($settings['roles']);

  // Insert the policy.
  $pid = db_insert('password_policy')->fields($settings)->execute();

  // Insert the roles that use this policy.
  if ($roles == GOVCMS_PASSWORD_POLICY_ALL_ROLES) {
    $roles = user_roles(TRUE);
  }

  if (!empty($roles) && is_array($roles)) {
    $query = db_insert('password_policy_role')->fields(array('pid', 'rid'));
    foreach (array_keys($roles) as $rid) {
      $query->values(array($pid, $rid));
    }
    $query->execute();
  }

  // Enforce passwords to reset as soon as new policies are implemented.
  // This catches a situation where the old policy has no expiration.
  // (For some reason this is stored as a string.)
  variable_set('password_policy_begin', "1");
}

/**
 * Disable the password policy warning for govCMS.
 */
function govcms_password_policy_warning_disable() {
  variable_set('govcms_password_policy_ready', 1);
}

/**
 * Enable the password policy warning for govCMS.
 */
function govcms_password_policy_warning_enable() {
  variable_set('govcms_password_policy_ready', 0);
}
